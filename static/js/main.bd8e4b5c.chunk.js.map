{"version":3,"sources":["actions/actions.js","reducers/tasks.js","components/playlist-health.jsx","components/playlist-action.jsx","App.js","index.js"],"names":["TO_DAMAGE","TO_ADD_HEALTH","TO_GAME_OVER","initialState","players","playerFirstHealth","playerFirstAction","id","playerSecondHealth","playerSecondAction","PlaylistHealth","this","props","playersStore","className","map","item","index","key","React","Component","connect","state","dispatch","PlaylistAction","modalWindow","info","onClick","closeModalWindow","document","querySelectorAll","style","display","onGameOver","winner","textWinner","actions","concat","type","App","firtBtn","onMovePlayer","secondBtn","movePlayer","Math","floor","random","randomRange","firstRandomRange","onChangeHealth","damage","player","comment","secondRandomRange","thirdRandomRange","onChangeAddHealth","addHealth","alert","data","payload","Date","now","toString","store","createStore","action","slice","applyMiddleware","logger","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.bd8e4b5c.chunk.js","sourcesContent":["export const TO_DAMAGE = \"TO_DAMAGE\";\nexport const TO_ADD_HEALTH = \"TO_ADD_HEALTH\";\nexport const TO_GAME_OVER = \"TO_GAME_OVER\";\n\nexport const onChangeHealth = ({ damage, player, comment }) => ({\n   type: TO_DAMAGE,\n   payload: {\n      damage,\n      player,\n      comment,\n      id: Date.now().toString()\n   }\n});\n\nexport const onChangeAddHealth = ({ addHealth, player, comment }) => ({\n   type: TO_ADD_HEALTH,\n   payload: {\n      addHealth,\n      player,\n      comment,\n      id: Date.now().toString()\n   }\n})\n\nexport const onGameOver = () => ({\n   type: TO_GAME_OVER\n})","import { TO_DAMAGE, TO_ADD_HEALTH, TO_GAME_OVER } from \"../actions/actions\";\n\nconst initialState = {\n  players: [\n    {\n      playerFirstHealth: 100,\n      playerFirstAction: [],\n      id: 1\n    },\n    {\n      playerSecondHealth: 100,\n      playerSecondAction: [],\n      id: 2\n    }\n  ]\n};\n\nexport default function list(state = initialState, action) {\n  switch (action.type) {\n    case TO_DAMAGE:\n      if (action.payload.player === 1) {\n        return {\n          players: [\n            {\n              playerFirstHealth:\n                state.players[0].playerFirstHealth - action.payload.damage,\n              playerFirstAction: [\n                ...state.players[0].playerFirstAction,\n                action.payload.comment\n              ],\n              id: action.payload.id\n            },\n            ...state.players.slice(1)\n          ]\n        };\n      } else if (action.payload.player === 2) {\n        return {\n          players: [\n            ...state.players.slice(0, 1),\n            {\n              playerSecondHealth:\n                state.players[1].playerSecondHealth - action.payload.damage,\n              playerSecondAction: [\n                ...state.players[1].playerSecondAction,\n                action.payload.comment\n              ],\n              id: action.payload.id\n            }\n          ]\n        };\n      }\n      break;\n\n    case TO_ADD_HEALTH:\n      if (action.payload.player === 1) {\n        return {\n          players: [\n            {\n              playerFirstHealth:\n                state.players[0].playerFirstHealth + action.payload.addHealth,\n              playerFirstAction: [\n                ...state.players[0].playerFirstAction,\n                action.payload.comment\n              ],\n              id: action.payload.id\n            },\n            ...state.players.slice(1)\n          ]\n        };\n      } else if (action.payload.player === 2) {\n        return {\n          players: [\n            ...state.players.slice(0, 1),\n            {\n              playerSecondHealth:\n                state.players[1].playerSecondHealth + action.payload.addHealth,\n              playerSecondAction: [\n                ...state.players[1].playerSecondAction,\n                action.payload.comment\n              ],\n              id: action.payload.id\n            }\n          ]\n        };\n      }\n      break;\n\n    case TO_GAME_OVER:\n      return initialState;\n\n    default:\n      return state;\n  }\n}","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"../App.css\";\n\nclass PlaylistHealth extends React.Component {\n  render() {\n    const { players } = this.props.playersStore;\n\n    return (\n      <ul className=\"container-ul-score\">\n        {players.map((item, index) => (\n          <li className=\"players-score\" key={index}>\n            {item.playerFirstHealth}\n            {item.playerSecondHealth}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    playersStore: state\n  }),\n  dispatch => ({})\n)(PlaylistHealth);","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { onGameOver } from \"../actions/actions\";\nimport \"../App.css\";\n\nclass PlaylistAction extends React.Component {\n  modalWindow = info => {\n    return (\n      <div id=\"1\" className=\"container-modal-window\">\n        <h2 className=\"modal-window-text\">{info}</h2>\n        <button\n          className=\"modal-window-button\"\n          onClick={() => this.closeModalWindow()}\n        >\n          Close\n        </button>\n      </div>\n    );\n  };\n\n  closeModalWindow = () => {\n    const elemModalWindow = document.querySelectorAll(\n      \".container-modal-window\"\n    )[0];\n    elemModalWindow.style.display = \"none\";\n    this.props.onGameOver();\n  };\n\n  render() {\n    const { players } = this.props;\n    let winner = false;\n    let textWinner = \"\";\n\n    let actions = [];\n    actions = actions.concat(\n      players[0].playerFirstAction,\n      players[1].playerSecondAction\n    );\n\n    if (players[0].playerFirstHealth <= 0) {\n      textWinner = \"Game over. The second player won!\";\n      winner = true;\n    } else if (players[1].playerSecondHealth <= 0) {\n      textWinner = \"Game over. The first player won!\";\n      winner = true;\n    }\n\n    return (\n      <div>\n        {winner && this.modalWindow(textWinner)}\n        <ul className=\"container-ul-actions\">\n          {actions.map((item, index) => (\n            <li className=\"players-actions\" key={index}>\n              {item}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  players: state.players\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onGameOver: () => dispatch(onGameOver())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PlaylistAction);","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { onChangeHealth, onChangeAddHealth } from \"./actions/actions\";\nimport PlaylistHealth from \"./components/playlist-health\";\nimport PlaylistAction from \"./components/playlist-action\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      randomRange: [1, 3, 18, 25, 10, 35]\n    };\n  }\n\n  firtBtn = () => {\n    let firtBtnPlayer = 1;\n    this.onMovePlayer(firtBtnPlayer);\n  };\n\n  secondBtn = () => {\n    let secondBtnPlayer = 2;\n    this.onMovePlayer(secondBtnPlayer);\n  };\n\n  onMovePlayer = movePlayer => {\n    let mainRandomRange = Math.floor(\n      Math.random() *\n        (this.state.randomRange[1] - this.state.randomRange[0] + 1) +\n        this.state.randomRange[0]\n    );\n\n    switch (mainRandomRange) {\n      case 1:\n        let firstRandomRange = Math.floor(\n          Math.random() *\n            (this.state.randomRange[3] - this.state.randomRange[2] + 1) +\n            this.state.randomRange[2]\n        );\n        if (movePlayer === 1) {\n          this.props.onChangeHealth({\n            damage: firstRandomRange,\n            player: movePlayer,\n            comment: `Player first damage: ${firstRandomRange}`\n          });\n        } else if (movePlayer === 2) {\n          this.props.onChangeHealth({\n            damage: firstRandomRange,\n            player: movePlayer,\n            comment: `Player second damage: ${firstRandomRange}`\n          });\n        }\n        break;\n\n      case 2:\n        let secondRandomRange = Math.floor(\n          Math.random() *\n            (this.state.randomRange[5] - this.state.randomRange[4] + 1) +\n            this.state.randomRange[4]\n        );\n        if (movePlayer === 1) {\n          this.props.onChangeHealth({\n            damage: secondRandomRange,\n            player: movePlayer,\n            comment: `Player first damage: ${secondRandomRange}`\n          });\n        } else if (movePlayer === 2) {\n          this.props.onChangeHealth({\n            damage: secondRandomRange,\n            player: movePlayer,\n            comment: `Player second damage: ${secondRandomRange}`\n          });\n        }\n        break;\n\n      case 3:\n        let thirdRandomRange = Math.floor(\n          Math.random() *\n            (this.state.randomRange[3] - this.state.randomRange[2] + 1) +\n            this.state.randomRange[2]\n        );\n        if (movePlayer === 1) {\n          this.props.onChangeAddHealth({\n            addHealth: thirdRandomRange,\n            player: movePlayer,\n            comment: `Player first add health: ${thirdRandomRange}`\n          });\n        } else if (movePlayer === 2) {\n          this.props.onChangeAddHealth({\n            addHealth: thirdRandomRange,\n            player: movePlayer,\n            comment: `Player second add health: ${thirdRandomRange}`\n          });\n        }\n        break;\n\n      default:\n        alert(\"Houston we have a problem :)\");\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"container-btn\">\n          <button className=\"btn\" onClick={() => this.firtBtn()}>\n            Player1\n          </button>\n          <button className=\"btn\" onClick={() => this.secondBtn()}>\n            Player2\n          </button>\n        </div>\n        <PlaylistHealth />\n        <PlaylistAction />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeHealth: data => dispatch(onChangeHealth(data)),\n  onChangeAddHealth: data => dispatch(onChangeAddHealth(data))\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(App);","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducer from \"./reducers/tasks\";\nimport logger from \"redux-logger\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst store = createStore(reducer, applyMiddleware(logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}